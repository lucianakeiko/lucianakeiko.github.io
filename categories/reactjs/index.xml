<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReactJS on Homo Somnium</title>
    <link>https://lucianakeiko.github.io/categories/reactjs/</link>
    <description>Recent content in ReactJS on Homo Somnium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Â© 1982â€“2021</copyright>
    <lastBuildDate>Sun, 22 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lucianakeiko.github.io/categories/reactjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReactJS</title>
      <link>https://lucianakeiko.github.io/post/2021-08-22-reactjs/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucianakeiko.github.io/post/2021-08-22-reactjs/</guid>
      <description>&lt;h2 id=&#34;configurando-o-ambiente&#34;&gt;Configurando o ambiente&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;yarn init -y
yarn add react
yarn add react-dom
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configurando-o-babel&#34;&gt;Configurando o Babel&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;yarn add @babel/core @babel/cli @babel/preset-env -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ðŸ’¾ babel.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
    presets: [
        &#39;@babel/preset-env&#39;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;p/ compilar na mÃ£o:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn babel src/index.js --out-file dist/bundle.js 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;p/ o babel entender o react&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add @babel/preset-react -D

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;e tambÃ©m &amp;lsquo;@babel/preset-react&amp;rsquo;, no babel config.&lt;/p&gt;
&lt;h3 id=&#34;configurando-o-webpack&#34;&gt;Configurando o Webpack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;yarn add webpack webpack-cli webpack-dev-server -D
yarn add babel-loader -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ðŸ’¾ webpack.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const path = require(&#39;path&#39;)
module.exports = {
    entry: path.resolve(__dirname, &#39;src&#39;, &#39;index.jsx&#39;),
    output: {
        path: path.resolve(__dirname, &#39;dist&#39;),
        filename: &#39;bundle.js&#39;
    },
    resolve: {
        extensions: [&#39;.js&#39;, &#39;.jsx&#39;],
    },
    module: {
        rules: [
            {
                test: /\.jsx$/,
                exclude: /node_modules/,
                use: &#39;babel-loader&#39;,
            }
        ],
    }
};

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;p/ rodar&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn webpack
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;estrutura-do-react&#34;&gt;Estrutura do React&lt;/h3&gt;
&lt;p&gt;no ðŸ’¾ babel.config.js&lt;/p&gt;
&lt;p&gt;p/ nÃ£o precisar importar o react&lt;/p&gt;
&lt;p&gt;[ &amp;lsquo;@babel/preset-react&amp;rsquo;, {
runtime: &amp;lsquo;automatic&amp;rsquo;
}],&lt;/p&gt;
&lt;p&gt;no webpack.config.js p/ compilar mais rÃ¡pido&lt;/p&gt;
&lt;h3 id=&#34;servindo-html-estÃ¡tico&#34;&gt;Servindo html estÃ¡tico&lt;/h3&gt;
&lt;p&gt;p/ injetar o bundle automaticamente.&lt;/p&gt;
&lt;p&gt;yarn add html-webpack-plugin -D
no ðŸ’¾ webpack.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)

. . . 


    plugins: [
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname, &#39;public&#39;, &#39;index.html&#39;)
        })
    ],
    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;webpack-devserver&#34;&gt;Webpack DevServer&lt;/h3&gt;
&lt;p&gt;-&amp;gt; Conf do Dev Server p/ ele criar o bundle automaticamente&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add webpack-dev-server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;no ðŸ’¾ webpack.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    devServer: {
        contentBase: path.resolve(__dirname, &#39;public&#39;),
    },
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;source-maps&#34;&gt;Source maps&lt;/h3&gt;
&lt;p&gt;Forma de conseguir visualizar o cÃ³digo original mesmo quando todo o cÃ³digo tÃ¡ embaralhado.&lt;/p&gt;
&lt;p&gt;no ðŸ’¾ webpack.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    devtool: isDevelopment ? &#39;eval-source-map&#39; : &#39;source-map&#39;,
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ambiente-dev-e-produÃ§Ã£o&#34;&gt;Ambiente dev e produÃ§Ã£o&lt;/h3&gt;
&lt;p&gt;no ðŸ’¾ webpack.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const isDevelopment = process.env.NODE_ENV !== &#39;production&#39;;

. . . 

    mode: isDevelopment ? &#39;development&#39; : &#39;production&#39;,
    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;cross-env&amp;rdquo;: para definir variÃ¡veis ambiente independente do SO.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add cross-env -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;e os scripts p/ os 2 casos&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;quot;scripts&amp;quot;: {
    &amp;quot;dev&amp;quot;: &amp;quot;webpack serve&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;cross-env NODE_ENV=production webpack&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;importando-arquivos-css--sass-loader&#34;&gt;Importando arquivos CSS + SASS loader&lt;/h3&gt;
&lt;p&gt;os modulos para a conversÃ£o&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add style-loader css-loader node-sass -D
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;
  {
                test: /\.scss$/ ,
                exclude: /node_modules/,
                use: [&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;],
            }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>